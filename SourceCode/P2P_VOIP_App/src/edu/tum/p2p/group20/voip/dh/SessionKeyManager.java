package edu.tum.p2p.group20.voip.dh;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.InvalidParameterSpecException;

import javax.crypto.KeyAgreement;
import javax.crypto.spec.DHParameterSpec;

import org.apache.commons.codec.binary.Base64;

/**
 * SessionKeyManager for managing the Diffie-Hellman key exchange.
 * 
 * <p>It does
 * 	<li>Random Diffie-Hellman parameter generation</li>
 * 	<li>Diffie-Hellman keys generation</li>
 * 	<li>Diffie-Hellman public key export</li>
 * 	<li>Session key generation</li></p>
 * 
 * <p>References:
 * 	<li>http://www.java2s.com/Tutorial/Java/0490__Security/DiffieHellmanKeyAgreement.htm</li>
 * 	<li>http://www.programcreek.com/java-api-examples/index.php?api=javax.crypto.KeyAgreement</li></p>
 * 	
 * 
 * @author Sri Vishnu Totakura  <srivishnu@totakura.in>
 *
 */
public class SessionKeyManager {
	
	private static int bitSize = Config.bitSize;
	private static String algorithm = Config.algorithm;
	
	private DHParameterSpec dhParams;
	private KeyPairGenerator keyGen;
	private KeyAgreement keyAgreement;
	private KeyPair dhKeyPair;
	private MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
	
	/**
	 * Creates a new instance of SessionKeyManager with the given Diffie-Hellman
	 * parameters and initiatlizes the instance with a new Diffie-Hellman key-pair
	 * 
	 * @param dhParams
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidAlgorithmParameterException
	 * @throws InvalidKeyException
	 */
	SessionKeyManager(DHParameterSpec dhParams)
			throws NoSuchAlgorithmException, InvalidAlgorithmParameterException,
					InvalidKeyException {	  			 
		  this.dhParams = dhParams;
		  
		  this.keyGen = KeyPairGenerator.getInstance(algorithm);		  
		  this.keyGen.initialize(this.dhParams, new SecureRandom());

		  this.keyAgreement = KeyAgreement.getInstance(algorithm);
		  this.dhKeyPair = this.keyGen.generateKeyPair(); 
		  this.keyAgreement.init(this.dhKeyPair.getPrivate());
	}
	
	/**
	 * Generates the session key from the given Diffie-Hellman public values.
	 * 
	 * Note: The sessionKey is hashed with SHA-256 and returned
	 * 
	 * @param otherPartyEncodedPublicKey: Byte encoded Diffie-Hellman Public key of the other party
	 * used for generating the session key in Diffie-Hellman key exchange. 
	 * @return byte encoded Secret session key. This should be same as generated by the other party.
	 * @throws InvalidKeyException
	 * @throws IllegalStateException
	 * @throws Exception
	 */
	public byte[] makeSessionKey(byte[] otherPartyEncodedPublicKey)
			throws InvalidKeyException, IllegalStateException, Exception {		
		keyAgreement.doPhase(Helpers.publicKeyFromByteEncoded(otherPartyEncodedPublicKey), true);
		messageDigest.update(keyAgreement.generateSecret());
		return messageDigest.digest();
	}
	
	/**
	 * Generates the session key from the given Diffie-Hellman public values.
	 * 
	 * Note: The sessionKey is hashed with SHA-256 and returned
	 * 
	 * @param otherPartyBase64PublicKeyString: Base64 encoded Diffie-Hellman Public key string of the other party
	 * used for generating the session key in Diffie-Hellman key exchange. 
	 * @return byte encoded Secret session key. This should be same as generated by the other party.
	 * @throws InvalidKeyException
	 * @throws IllegalStateException
	 * @throws Exception
	 */
	public byte[] makeSessionKey(String otherPartyBase64PublicKeyString)
			throws InvalidKeyException, IllegalStateException, Exception {
		return makeSessionKey(Base64.decodeBase64(otherPartyBase64PublicKeyString));	
	}
	
	/**
	 * Returns the public key of the Diffie-Hellmann exchange for this party
	 * as a byte encoded value.
	 * 
	 * @return byte array encoded value for the Diffie-Hellmann key pair's public key 
	 */
	public byte[] publicByteEncodedDHKey() {
		return this.dhKeyPair.getPublic().getEncoded();
	}
	
	/**
	 * Returns the Diffie-Hellman key-pair's public key as Base64 encoded string
	 * 
	 * @return Diffie-Hellman key-pair's public key as Base64 encoded string 
	 */
	public String base64PublicDHKeyString() {
		return Base64.encodeBase64String(publicByteEncodedDHKey());
	}
	
	/**
	 * Initializes a SessionKeyManager as an initiator by generating new random
	 * Diffie-Hellman parameters.
	 * 
	 * @return new SessionKeyManager 
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidParameterSpecException 
	 * @throws InvalidAlgorithmParameterException 
	 * @throws InvalidKeyException 
	 */
	public static SessionKeyManager makeInitiator()
			throws NoSuchAlgorithmException, InvalidParameterSpecException,
					InvalidKeyException, InvalidAlgorithmParameterException {
		
		AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance(algorithm);		  
		paramGen.init(bitSize);
		
		AlgorithmParameters params = paramGen.generateParameters();		  
		DHParameterSpec dhSpec = (DHParameterSpec) params.getParameterSpec(DHParameterSpec.class);	  			 
		
		return new SessionKeyManager(new DHParameterSpec(dhSpec.getP(), dhSpec.getG()));
	}
	
	/**
	 * Initiatlizes a SessionKeyManager instance for the other party(which is not
	 * an key exchange initiator) with the same Diffie-Hellman parameters used by
	 * the initiator.
	 * 
	 * @param initiatorEncodedDHPublicKey: Used to derive the same Diffie-Hellman
	 * parameters as used by the initiator
	 * 
	 * @return new SessionKeyManager
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 */
	public static SessionKeyManager makeSecondParty(byte[] initiatorEncodedDHPublicKey)
			throws NoSuchAlgorithmException, InvalidKeySpecException,
					InvalidKeyException, InvalidAlgorithmParameterException {
		
		PublicKey initiatorDHPublicKey = Helpers.publicKeyFromByteEncoded(initiatorEncodedDHPublicKey);
	    DHParameterSpec initiatorDHParams = ((javax.crypto.interfaces.DHPublicKey) initiatorDHPublicKey)
	    										.getParams();
	    return new SessionKeyManager(initiatorDHParams);
	}
	
	/**
	 * Initiatlizes a SessionKeyManager instance for the other party(which is not
	 * an key exchange initiator) with the same Diffie-Hellman parameters used by
	 * the initiator.
	 * 
	 * @param initiatorBase64DHPublicKeyString: Used to derive the same Diffie-Hellman
	 * parameters as used by the initiator
	 * 
	 * @return new SessionKeyManager
	 * @throws NoSuchAlgorithmException
	 * @throws InvalidKeySpecException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 */
	public static SessionKeyManager makeSecondParty(String initiatorBase64DHPublicKeyString)
			throws NoSuchAlgorithmException, InvalidKeySpecException,
					InvalidKeyException, InvalidAlgorithmParameterException {
		return  makeSecondParty(Base64.decodeBase64(initiatorBase64DHPublicKeyString));
	}
}